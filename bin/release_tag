#!/usr/bin/python3

import argparse
import re
from subprocess import call, check_output
from datetime import datetime

def replacefile(file, match, replace):
    with open(file, encoding="utf-8") as inf:
        lines = [re.sub(match, replace, l) for l in inf.readlines()]
    with open(file, "w", encoding="utf-8") as outf:
        for l in lines:
            outf.write(l)
        
def git(cmd, *a):
    call(["git", cmd]+list(a))

def dch(version):
    tz = datetime.now().astimezone().tzinfo
    dt = datetime.now(tz)
    date = dt.strftime("%a, %d %b %Y %H:%M:%S %z")
    txt = """ptxprint ({0}-1ubuntu1) bionic; urgency=medium

  * Bumped release to {0}

 -- Martin Hosken <martin_hosken@sil.org>  {1}

""".format(version, date)
    with open("debian/changelog") as inf:
        lines = list(inf.readlines())
    with open("debian/changelog", "w") as outf:
        outf.write(txt)
        for l in lines:
            outf.write(l)

def get_branches():
    txt = check_output(["git", "branch", "-vv"])
    res = {}
    for l in txt.decode("utf-8").split("\n"):
        m = re.match(r"^  (\S+)\s.*?\[(.*?)\]", l)
        if m:
            name = m.group(1)
            if ':' in m.group(2):
                upstream = m.group(2)[:m.group(2).find(':')]
            else:
                upstream = m.group(2)
            res[name] = upstream
    return res

def get_gitver()
    txt = check_output(["git", "describe"]).decode("utf-8", errors="ignore")
    return txt.strip()

parser = argparse.ArgumentParser()
parser.add_argument("version")
parser.add_argument("-a", action="store_true")
parser.add_argument("-s", action="store_true")
args = parser.parse_args()
tagopt = "-a"
if args.s:
    tagopt = "-s"

replacefile("setup.py", r'(version=").*?"', r'\g<1>'+args.version+'"')
replacefile("InnoSetupPTXprint.iss", r'(#define MyAppVersion ").*?"', r'\g<1>'+args.version+'"')
replacefile("python/lib/ptxprint/ptxprint.glade", r'(property name=\"version\">Version ).*?(<\/property>)', r'\g<1>'+args.version+r'\g<2>')
replacefile("python/lib/ptxprint/view.py", r'(VersionStr = ").*?"', r'\g<1>'+args.version+'"')
replacefile("docs/inno-docs/ReleaseNotes.txt", r'(PTXprint )\S+( Release Notes)', r'\g<1>'+args.version+'\g<2>')

branches = get_branches()

git("commit", "-a", "-m", "Releasing "+args.version)
git("tag", tagopt, "-m", "Tagging "+args.version, args.version)
git("push", "--tag")
git("push")

gitversion = get_gitver()
replacefile("python/lib/ptxprint/view.py", r'(GitVersionStr = ").*?"', r'\g<1>'+gitversion+'"')

if 'origin/packaging' not in branches.values():
    git("checkout", "-t", "-b", "packaging", "origin/packaging")
else:
    git("checkout", "packaging")
git("pull")
dch(args.version)
git("commit", "-a", "-m", "Bumped release version to "+args.version)
git("push")

if 'origin/lasttag' not in branches.values():
    git("checkout", "-t", "-b", "lasttag", "origin/lasttag")
else:
    git("checkout", "lasttag")
git("reset", "--hard", "master")
git("push")
git("checkout", "master")

