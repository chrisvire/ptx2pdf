#!/usr/bin/python3

import argparse, sys, os, configparser
import appdirs
import site, logging

if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    site.USER_BASE = os.path.join(os.path.expanduser("~"), ".local")
    if not hasattr(site, 'getuserbase'):
        site.getuserbase = lambda : site.USER_BASE
    os.putenv("PATH", sys._MEIPASS)

try:
    import ptxprint
except ImportError:
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))
    import ptxprint

from pathlib import Path

def getnsetlang(config):
    envlang = os.getenv("LANG", None)
    oldlang = config.get("init", "syslang", fallback=None)
    newlang = config.get("init", "lang", fallback=None)
    if envlang is None or oldlang == envlang:
        return newlang
    config.set("init", "lang", envlang or "")
    config.set("init", "syslang", envlang or "")
    return envlang

class DictAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        vals = getattr(namespace, self.dest, None)
        if vals is None:
            vals = {}
            setattr(namespace, self.dest, vals)
        (k, v) = values.split("=")
        vals[k] = v

class StreamLogger:     # thanks to shellcat_zero https://stackoverflow.com/questions/19425736/how-to-redirect-stdout-and-stderr-to-logger-in-python
    def __init__(self, logger, level):
        self.logger = logger
        self.level = level
    def write(self, buf):
        for line in buf.rstrip().splitlines():
            self.logger.log(self.level, line.rstrip())
    def flush(self):
        pass

parser = argparse.ArgumentParser()
# parser.add_argument('-h','--help', help="show this help message and exit")
parser.add_argument('pid',nargs="?",help="Project id or full path to a ptxprint.cfg file")
parser.add_argument('-c','--config',help='Configuration path to load')
parser.add_argument("-M",'--module',help="Module to print")
parser.add_argument('-p','--paratext',help="Path to Paratext Projects directory")
parser.add_argument('-d','--directory',help="Directory to store temporary files in")
parser.add_argument('-P','--print',action='store_true',help="Hits print")
parser.add_argument('-b','--books',help='Space separated bookid list to set')
parser.add_argument('-R','--runs',type=int,default=0,help="limit xetex runs")
parser.add_argument('-L','--lang',help='Set UI language code')
parser.add_argument('-m','--macros',help="Directory containing TeX macros (paratext2.tex)")
parser.add_argument('-l','--logging',help="Enable logging level [DEBUG, *INFO*, WARN, ERROR, number]")
parser.add_argument('--logfile',default='ptxprint.log',help='Set logging file [ptxprint.log] or "none"')
parser.add_argument('--timeout',default=1200,type=int,help='xetex runtime timeout')
parser.add_argument('-T','--testing',action='store_true',help="Run in testing, output xdv")
parser.add_argument('-f','--fontpath',action='append',help="Directory of fonts to include (repeatable)")
parser.add_argument('--nofontcache',action="store_true",help="Don't use system fonts")
parser.add_argument('-A','--action',help="Run view method instead of print")
parser.add_argument('-F','--diff',help='Create difference PDF against PDF file'),
parser.add_argument('-D','--define',action=DictAction,help="set UI component=value. Repeatable")
parser.add_argument('--debug',action="store_true",help="Give debug output")
parser.add_argument("-C","--capture",help="Capture interaction events to file. Not to be used yet")
parser.add_argument("-z","--extras",type=int,default=0,help="Special bit flags: 0-3 - verbosity of xdvipdfmx")
parser.add_argument("-I","--identify",action="store_true",help="add widget names to tooltips")
# parser.add_argument('-t','--test', action='store_true',help="Quick start for a lazy typist")
args = parser.parse_args()

# We might need to do this AFTER reading in the user-config file (as the UI language needs to be read)
# setup_i18n()

log = None
logconffile = os.path.join(appdirs.user_config_dir("ptxprint", "SIL"), "ptxprint_logging.cfg")
if sys.platform == 'win32' and args.logfile == 'ptxprint.log':
    args.logfile = os.path.join(appdirs.user_config_dir("ptxprint", "SIL"), "ptxprint.log")
if os.path.exists(logconffile):
    logging.config.fileConfig(logconffile)
    log = logging.getLogger('ptxprint')
elif args.logging:
    try:
        loglevel = int(args.logging)
    except ValueError:
        loglevel = getattr(logging, args.logging.upper(), None)
    if isinstance(loglevel, int):
        parms = {'level': loglevel, 'datefmt': '%d/%b/%Y %H:%M:%S', 'format': '%(asctime)s %(levelname)s:%(module)s(%(lineno)d) %(message)s'}
        if args.logfile.lower != "none":
            logfh = open(args.logfile, "w", encoding="utf-8")
            parms.update(stream=logfh, filemode="w") #, encoding="utf-8")
        try:
            logging.basicConfig(**parms)
        except FileNotFoundError as e:      # no write access to the log
            print("Exception", e)
    log = logging.getLogger('ptxprint')
    log.info("git sha: $Id$")

if log is not None and getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    sys.stdio = StreamLogger(log, logging.INFO)
    sys.stderr = StreamLogger(log, logging.ERROR)

from ptxprint.utils import _, setup_i18n, get_ptsettings, pt_bindir, putenv
from ptxprint.font import initFontCache, cachepath, writefontsconf

fontconfig_path = writefontsconf()
putenv("FONTCONFIG_FILE", fontconfig_path)
if not args.print and not args.action:
    from ptxprint.gtkview import GtkViewModel, getPTDir, reset_gtk_direction

from ptxprint.view import ViewModel, VersionStr, doError
from ptxprint.runjob import RunJob, isLocked

# necessary for the side effect of setting pt_bindir :(
if args.paratext is None:
    args.paratext = os.getenv("PTXPRINT_PROJECTSDIR", None)
    if args.paratext is None:
        args.paratext = get_ptsettings()

conffile = os.path.join(appdirs.user_config_dir("ptxprint", "SIL"), "ptxprint_user.cfg")
config = configparser.ConfigParser()
if os.path.exists(conffile):
    config.read(conffile, encoding="utf-8")
    if args.pid is None and config.has_option("init", "project"):
        args.pid = config.get('init', 'project')
        if args.config is None and config.has_option("init", "config"):
            args.config = config.get('init', 'config')
    if not args.paratext and config.has_option("init", "paratext"):
        args.paratext = config.get("init", "paratext")
        if not os.path.exists(args.paratext):
            args.paratext = None
else:
    if not os.path.exists(os.path.dirname(conffile)):
        os.makedirs(os.path.dirname(conffile))
    config.add_section("init")
logging.debug("Loaded config")

if args.lang is None:
    args.lang = getnsetlang(config)

if not args.paratext or str(args.paratext).lower() == "none":
    # print("No Paratext Settings directory found - sys.exit(1)")
    if not args.print:
        args.paratext = getPTDir()
        if args.paratext is None:
            sys.exit(1)
    else:
        sys.exit(1)
else:
    args.paratext = os.path.abspath(args.paratext.replace("\\", "/"))
    if args.paratext.endswith("/"):
        args.paratext = args.paratext[:-1]

config.set("init", "paratext", str(args.paratext))

if args.pid is not None and (any(x in args.pid for x in "\\/") or args.pid.lower().endswith(".cfg")):
    pidpath = os.path.relpath(args.pid, args.paratext).replace("\\", "/")
    if pidpath.startswith("..") or pidpath.startswith("/"):
        pidpath = os.path.abspath(args.pid).replace("\\", "/")
    pidbits = pidpath.split("/")
    if len(pidbits) > 4 and "ptxprint" in [x.lower() for x in pidbits[-3:-1]]:
        if pidbits[-2].lower() == "ptxprint":
            if len(pidbits) > 4:
                args.paratext = "/".join(pidbits[:-4])
            pidbits = pidbits[-4:]
        elif pidbits[-3].lower() == "ptxprint":
            if len(pidbits) > 5:
                args.paratext = "/".join(pidbits[:-5])
            pidbits = pidbits[-5:]
    if len(pidbits) == 5:
        args.config = pidbits[3]
    if len(pidbits) > 3:
        args.pid = pidbits[0]

if args.directory is not None:
    args.directory = os.path.abspath(args.directory)
else:
    args.directory = os.path.abspath(".")

# Where to find the default for -p
# HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Paratext\8:Settings_Directory

logging.debug(f"project id={args.pid}, config={args.config}, directory={args.directory}")

scriptsdir = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname(__file__)))
if os.path.exists("/usr/share/ptx2pdf") and not os.path.exists(os.path.join(scriptsdir, "..", "..", "src")):
    scriptsdir = "/usr/share/ptx2pdf"
    macrosdir = "/usr/share/ptx2pdf/texmacros"
elif getattr(sys, 'frozen', False):
    macrosdir = os.path.join(scriptsdir, "ptx2pdf")
else:
    macrosdir = os.path.join(scriptsdir, "..", "..", "src")

def doit(printer, maxruns=0, noview=False, nothreads=False, forcedlooseness=None):
    if not isLocked():
        if maxruns > 0:
            oldruns = args.runs
            args.runs = maxruns
        runjob = RunJob(printer, scriptsdir, args)
        runjob.nothreads = nothreads
        runjob.forcedlooseness = forcedlooseness
        runjob.doit(noview=noview)
        if maxruns > 0:
            args.runs = oldruns
        return runjob
    else:
        return None

if args.fontpath is not None:
    for p in args.fontpath:
        if os.path.exists(p):
            cachepath(p, nofclist=args.nofontcache)

if args.pid:
    pdir = os.path.join(args.paratext, args.pid)
    if not os.path.exists(pdir):
        args.pid = None
    elif args.config:
        pdir = os.path.join(pdir, "shared", "ptxprint", args.config, "ptxprint.cfg")
        if not os.path.exists(pdir):
            args.config = None

if args.print or args.action is not None:
    mainw = ViewModel(args.paratext, args.directory, config, macrosdir, args)
    if args.pid:
        mainw.setPrjid(args.pid, loadConfig=False)
        mainw.setConfigId(args.config or "Default")
    res = 0
    logging.debug(f"Created viewmodel for {args.paratext}")
    initFontCache(nofclist=args.nofontcache).wait()
    logging.debug("Loaded fonts")
    if args.print:
        if args.books is not None and len(args.books):
            mainw.bookNoUpdate = True
            bl = args.books.split(" ")
            if len(bl) == 1:
                mainw.set("ecb_book", bl[0])
                mainw.set("r_book", "single")
            elif len(bl) > 1:
                mainw.set("ecb_booklist", args.books)
                mainw.set("r_book", "multiple")
        elif args.module is not None and len(args.module):
            mainw.set("r_book", "module")
            mainw.moduleFile = Path(args.module)
        if args.define is not None:
            for k, v in args.define.items():
                mainw.set(k, v)
        if args.diff:
            mainw.set("btn_selectDiffPDF", os.path.abspath(args.diff))
            mainw.set("c_onlyDiffs", True)
            mainw.docreatediff = True
        mainw.savePics()
        mainw.saveStyles()
        job = doit(mainw, nothreads=True)
        if job is not None:
            res = job.res
        else:
            res = 0
    if args.action:
        getattr(mainw, args.action)()
    print(f"{res=}")
    sys.exit(res)
else:
    goround = True
    while (goround):
        setup_i18n(args.lang)
        reset_gtk_direction()
        goround = False
        mainw = GtkViewModel(args.paratext, args.directory, config, macrosdir, args)
        if args.pid:
            mainw.setPrjid(args.pid)
            mainw.setConfigId(args.config or "Default")
        if args.define is not None:
            for k, v in args.define.items():
                mainw.set(k, v)
        logging.debug(f"Created gtkview for {args.paratext}")
        mainw.run(doit)
        if mainw.lang != args.lang:
            if not sys.platform.startswith("win"):
                mainw.lang += ".UTF-8"
            config.set("init", "lang", mainw.lang)
            if args.lang is not None:
                args.lang = mainw.lang
                print(f"{args.lang}")
                args.pid = mainw.prjid
                args.config = mainw.configId
                goround = True
    with open(conffile, "w", encoding="utf-8") as outf:
        config.write(outf)
