#!/usr/bin/python3

import os, argparse, re, regex
from functools import reduce
from ptxprint.reference import RefList, AnyBooks
from ptxprint.utils import runChanges

import logging

logger = logging.getLogger(__name__)

def make_contextsfn(bk, *changes):
    # functional programmers eat your hearts out
    def makefn(reg, currfn):
        if currfn is not None:
            def compfn(fn, b, s):
                def domatch(m):
                    return currfn(lambda x:fn(m.group(0)), b, m.group(0))
                return reg.sub(domatch, s) if bk is None or b == bk else s
        else:
            def compfn(fn, b, s):
                return reg.sub(lambda m:fn(m.group(0)), s) if bk is None or b == bk else s
        return compfn
    return reduce(lambda currfn, are: makefn(are, currfn), reversed([c for c in changes if c is not None]), None)

def readChanges(fname, bk):
    changes = []
    if not os.path.exists(fname):
        return []
    qreg = r'(?:"((?:[^"\\]|\\.)*?)"|' + r"'((?:[^'\\]|\\.)*?)')"
    with open(fname, encoding="utf-8") as inf:
        alllines = list(inf.readlines())
        i = 0
        while i < len(alllines):
            l = alllines[i].strip().replace(u"\uFEFF", "")
            i += 1
            while l.endswith("\\") and i < len(alllines):
                l = l[:-1] + alllines[i].strip()
                i += 1
            l = re.sub(r"\s*#.*$", "", l)
            if not len(l):
                continue
            contexts = []
            atcontexts = []
            m = re.match(r"^\s*include\s+(['\"])(.*?)\1", l)
            if m:
                changes.extend(readChanges(os.path.join(os.path.dirname(fname), m.group(2)), bk))
                continue
            # test for "at" command
            m = re.match(r"^\s*at\s+(.*?)\s+(?=in|['\"])", l)
            if m:
                atref = RefList.fromStr(m.group(1), context=AnyBooks)
                for r in atref.allrefs():
                    if r.chap == 0:
                        atcontexts.append((r.book, None))
                    elif r.verse == 0:
                        atcontexts.append((r.book, regex.compile(r"(?<=\\c {}\D).*?(?=$|\\[cv]\s)".format(r.chap), flags=regex.S)))
                    else:
                        atcontexts.append((r.book, regex.compile(r"\\c {}\D(?:[^\\]|\\(?!c\s))*?\K\\v {}\D.*?(?=$|\\[cv]\s)".format(r.chap, r.verse), flags=regex.S|regex.V1)))
                l = l[m.end():].strip()
            else:
                atcontexts = [None]
            # test for 1+ "in" commands
            while True:
                m = re.match(r"^\s*in\s+"+qreg+r"\s*:\s*", l)
                if not m:
                    break
                try:
                    contexts.append(regex.compile(m.group(1) or m.group(2), flags=regex.M))
                except re.error as e:
                    print("Regular expression error: {} in changes file at line {}".format(str(e), i+1))
                    break
                l = l[m.end():].strip()
            # capture the actual change
            m = re.match(r"^"+qreg+r"\s*>\s*"+qreg, l)
            if m:
                try:
                    r = regex.compile(m.group(1) or m.group(2), flags=regex.M)
                    # t = regex.template(m.group(3) or m.group(4) or "")
                except (re.error, regex._regex_core.error) as e:
                    print("Regular expression error: {} in changes file at line {}".format(str(e), i+1))
                    continue
                for at in atcontexts:
                    if at is None:
                        context = make_contextsfn(None, *contexts) if len(contexts) else None
                    elif len(contexts) or at[1] is not None:
                        context = make_contextsfn(at[0], at[1], *contexts)
                    else:
                        context = at[0]
                    changes.append((context, r, m.group(3) or m.group(4) or "", f"{fname} line {i+1}"))
                continue
            elif len(l):
                logger.warning(f"Faulty change line found in {fname} at line {i}:\n{l}")
    return changes

parser = argparse.ArgumentParser()
parser.add_argument("infile",help="Input file")
parser.add_argument("-o","--outfile",help="Output file")
parser.add_argument("-c","--changes",help="changes.txt")
parser.add_argument('-b','--book',help='Book code')
args = parser.parse_args()

changes = readChanges(args.changes, args.book)
with open(args.infile, encoding="utf-8") as inf:
    dat = inf.read()

newdat = runChanges(changes, args.book, dat)

if args.outfile:
    with open(args.outfile, "w", encoding="utf-8") as outf:
        outf.write(newdat)



